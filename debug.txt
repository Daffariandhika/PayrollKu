function getPTKP(status) {
  const table = {
    'TK/0': 54000000, 'TK/1': 58500000, 'TK/2': 63000000, 'TK/3': 67500000,
    'K/0': 58500000, 'K/1': 63000000, 'K/2': 67500000, 'K/3': 72000000
  };
  return table[status];
}

// Assume these values are coming from your DB:
console.log("=== Payroll Debug ===");
console.log(`Employee: ${employee.name}`);
console.log(`Status PTKP: ${employee.status}`);
console.log(`Gross Earning: Rp ${grossEarning.toLocaleString('id-ID')}`);
console.log(`BPJS Total: Rp ${totalBpjs.toLocaleString('id-ID')}`);
console.log(`Other Deductions: Rp ${otherDeductions.toLocaleString('id-ID')}`);
console.log(`Biaya Jabatan: Rp ${biayaJabatan.toLocaleString('id-ID')}`);

// PTKP Monthly
const ptkpBulanan = getPTKP(employee.status) / 12;
console.log(`PTKP Bulanan: Rp ${ptkpBulanan.toLocaleString('id-ID')}`);

// PKP Monthly
const pkpBulanan = Math.max(grossEarning - totalBpjs - otherDeductions - biayaJabatan - ptkpBulanan, 0);
console.log(`PKP Bulanan (Penghasilan Kena Pajak): Rp ${pkpBulanan.toLocaleString('id-ID')}`);

// PKP Tahunan
const pkpTahunan = pkpBulanan * 12;
console.log(`PKP Tahunan: Rp ${pkpTahunan.toLocaleString('id-ID')}`);

// Tax calculation function
function getPPH(taxableIncome) {
  let tax = 0;
  const taxBrackets = [
    { limit: 60000000, rate: 0.05 },
    { limit: 250000000, rate: 0.15 },
    { limit: 500000000, rate: 0.25 },
    { limit: 5000000000, rate: 0.30 },
    { limit: Infinity, rate: 0.35 }
  ];
  let remaining = taxableIncome;
  let prevLimit = 0;
  for (const { limit, rate } of taxBrackets) {
    if (remaining <= 0) break;
    const taxableAtThisRate = Math.min(limit - prevLimit, remaining);
    console.log(` - Rp ${taxableAtThisRate.toLocaleString('id-ID')} dikenakan tarif ${rate * 100}%`);
    tax += taxableAtThisRate * rate;
    remaining -= taxableAtThisRate;
    prevLimit = limit;
  }
  return tax;
}

// PPh Tahunan
const pphTahunan = getPPH(pkpTahunan);
console.log(`PPh 21 Tahunan: Rp ${pphTahunan.toLocaleString('id-ID')}`);

// PPh Bulanan
const tax = pphTahunan / 12;
console.log(`PPh 21 Bulanan: Rp ${Math.round(tax).toLocaleString('id-ID')}`);
console.log("=====================");


//payslip table

import React from 'react';
import PropTypes from 'prop-types';

const formatMoney = amount =>
  typeof amount === 'number'
    ? amount.toLocaleString('id-ID', { style: 'currency', currency: 'IDR' })
    : '-';

const PayslipTable = ({ payroll }) => {
  const incomeCosts = payroll.individualcost?.filter(e => e.costType === 'income') || [];
  const deductionCosts = payroll.individualcost?.filter(e => e.costType === 'deduction') || [];
  const oneOffIncomes = payroll.oneOffPaymentArray?.filter(e => e.costType === 'income') || [];
  const oneOffDeductions = payroll.oneOffPaymentArray?.filter(e => e.costType === 'deduction') || [];

  const hasBPJS = !!(payroll.BPJS?.JHT || payroll.BPJS?.JP || payroll.BPJS?.KS);

  const period = `${payroll.presentMonth || new Date().toLocaleString('id-ID', { month: 'long' })} ${payroll.presentYear || new Date().getFullYear()}`;

  const SectionHeader = ({ title, earnings }) => (
    <tr>
      <td
        colSpan={2}
        style={{
          backgroundColor: earnings ? '#ecfdf5' : '#fee2e2',
          color: earnings ? '#047857' : '#b91c1c',
          fontWeight: '700',
          fontSize: 14,
          textAlign: 'center',
          padding: '8px 0',
          borderBottom: '1px solid #ddd',
          userSelect: 'none',
        }}
      >
        {title}
      </td>
    </tr>
  );

  const renderCosts = items =>
    items.map(item => (
      <tr key={item._id || item.name}>
        <td
          style={{
            padding: '6px 8px',
            borderBottom: '1px solid #f0f0f0',
            fontSize: 13,
            color: '#111827',
          }}
        >
          {item.name || '-'}
        </td>
        <td
          style={{
            padding: '6px 8px',
            borderBottom: '1px solid #f0f0f0',
            textAlign: 'right',
            fontSize: 13,
            color: '#111827',
          }}
        >
          {formatMoney(item.amount)}
        </td>
      </tr>
    ));

  return (
    <div
      style={{
        fontFamily: "'Segoe UI', Tahoma, Geneva, Verdana, sans-serif",
        maxWidth: 1000,
        margin: '24px auto',
        border: '1px solid #ddd',
        borderRadius: 4,
        overflow: 'hidden',
        boxShadow: '0 0 8px rgba(0,0,0,0.05)',
        backgroundColor: '#fff',
      }}
    >
      {/* HEADER */}
      <div
        style={{
          backgroundColor: '#1e293b',
          color: 'white',
          padding: '24px 28px',
          display: 'flex',
          justifyContent: 'space-between',
          alignItems: 'center',
          userSelect: 'none',
        }}
      >
        <h2 style={{ margin: 0, fontWeight: '700', fontSize: 22 }}>PayrollKu.app</h2>
        <h3 style={{ margin: 0, fontWeight: '700', fontSize: 18 }}>SLIP GAJI</h3>
      </div>

      {/* EMPLOYEE INFO */}
      <table
        style={{
          width: '100%',
          borderCollapse: 'collapse',
          fontSize: 16,
          fontWeight: '500',
          marginTop: 0,
          userSelect: 'none',
        }}
      >
        <tbody>
          {[
            ['Nama',payroll.employeeDetails.name, 'Departemen', payroll.employeeDetails.department],
            ['ID Pegawai', payroll.employeeDetails.tag, 'Posisi', payroll.employeeDetails.designation],
            ['NPWP', payroll.employeeDetails.npwp || '-', 'Jabatan', payroll.employeeDetails.levelName || '-'],
            ['PTKP', payroll.employeeDetails.status || '-', 'Periode', period],
          ].map((row, idx) => (
            <tr
              key={idx}
              style={{
                borderBottom: idx < 3 ? '1px solid #e0f2fe' : undefined,
                backgroundColor: idx % 2 === 0 ? '#f9fafb' : '#fff',
              }}
            >
              <td
                style={{
                  width: '18%',
                  fontWeight: '700',
                  padding: '8px 12px',
                  userSelect: 'text',
                }}
              >
                {row[0]}
              </td>
              <td style={{ width: '32%', padding: '8px 12px' }}>{row[1] || '-'}</td>
              <td
                style={{
                  width: '18%',
                  fontWeight: '700',
                  padding: '8px 12px',
                  userSelect: 'text',
                }}
              >
                {row[2]}
              </td>
              <td style={{ width: '32%', padding: '8px 12px' }}>{row[3] || '-'}</td>
            </tr>
          ))}
        </tbody>
      </table>

      {/* EARNINGS & DEDUCTIONS */}
      <div
        style={{
          display: 'flex',
          marginTop: 24,
          gap: 24,
          userSelect: 'text',
        }}
      >
        {/* Earnings */}
        <table
          style={{
            flex: 1,
            borderCollapse: 'collapse',
            fontSize: 14,
            boxShadow: '0 0 3px rgb(0 0 0 / 0.05)',
          }}
        >
          <tbody>
            <SectionHeader title="PENDAPATAN" earnings />

            <tr>
              <td style={{ padding: '8px 12px', fontSize: 14 }}>Gaji Pokok</td>
              <td
                style={{
                  padding: '8px 12px',
                  textAlign: 'right',
                  fontSize: 14,
                  fontWeight: '600',
                }}
              >
                {formatMoney(payroll.basic)}
              </td>
            </tr>

            {/* Bonuses */}
            {payroll.level?.bonuses?.length > 0 && (
              <>
                <tr
                  style={{
                    backgroundColor: '#ecfdf5',
                    color: '#047857',
                    fontWeight: '600',
                    fontSize: 13,
                  }}
                >
                  <td colSpan={2} style={{ paddingLeft: 12 }}>
                    Tunjangan Divisi
                  </td>
                </tr>
                {renderCosts(payroll.level.bonuses)}
              </>
            )}

            {/* Individual Income */}
            {incomeCosts.length > 0 && (
              <>
                <tr
                  style={{
                    backgroundColor: '#ecfdf5',
                    color: '#047857',
                    fontWeight: '600',
                    fontSize: 13,
                  }}
                >
                  <td colSpan={2} style={{ paddingLeft: 12 }}>
                    Tunjangan Personal
                  </td>
                </tr>
                {renderCosts(incomeCosts)}
              </>
            )}

            {/* One Off Income */}
            {oneOffIncomes.length > 0 && (
              <>
                <tr
                  style={{
                    backgroundColor: '#ecfdf5',
                    color: '#047857',
                    fontWeight: '600',
                    fontSize: 13,
                  }}
                >
                  <td colSpan={2} style={{ paddingLeft: 12 }}>
                    Tunjangan Sekali
                  </td>
                </tr>
                {renderCosts(oneOffIncomes)}
              </>
            )}

            {/* Company Contributions */}
            <SectionHeader title="KONTRIBUSI PERUSAHAAN" earnings />
            {payroll.BPJS_employer?.JHT && (
              <tr>
                <td style={{ padding: '8px 12px' }}>BPJS JHT (3.7%)</td>
                <td style={{ padding: '8px 12px', textAlign: 'right' }}>
                  {formatMoney(payroll.BPJS_employer.JHT)}
                </td>
              </tr>
            )}
            {payroll.BPJS_employer?.JP && (
              <tr>
                <td style={{ padding: '8px 12px' }}>BPJS JP (2%)</td>
                <td style={{ padding: '8px 12px', textAlign: 'right' }}>
                  {formatMoney(payroll.BPJS_employer.JP)}
                </td>
              </tr>
            )}
            {payroll.BPJS_employer?.KS && (
              <tr>
                <td style={{ padding: '8px 12px' }}>BPJS Kesehatan (4%)</td>
                <td style={{ padding: '8px 12px', textAlign: 'right' }}>
                  {formatMoney(payroll.BPJS_employer.KS)}
</td>
</tr>
)}
</tbody>
</table>
    {/* Deductions */}
    <table
      style={{
        flex: 1,
        borderCollapse: 'collapse',
        fontSize: 14,
        boxShadow: '0 0 3px rgb(0 0 0 / 0.05)',
      }}
    >
      <tbody>
        <SectionHeader title="POTONGAN" earnings={false} />

        {/* BPJS deductions */}
        {hasBPJS && (
          <>
            <tr>
              <td style={{ padding: '8px 12px' }}>BPJS JHT (2%)</td>
              <td style={{ padding: '8px 12px', textAlign: 'right' }}>
                {formatMoney(payroll.BPJS?.JHT)}
              </td>
            </tr>
            <tr>
              <td style={{ padding: '8px 12px' }}>BPJS JP (1%)</td>
              <td style={{ padding: '8px 12px', textAlign: 'right' }}>
                {formatMoney(payroll.BPJS?.JP)}
              </td>
            </tr>
            <tr>
              <td style={{ padding: '8px 12px' }}>BPJS Kesehatan (1%)</td>
              <td style={{ padding: '8px 12px', textAlign: 'right' }}>
                {formatMoney(payroll.BPJS?.KS)}
              </td>
            </tr>
          </>
        )}
        {/* Individual Deductions */}
        {deductionCosts.length > 0 && (
          <>
            <tr
              style={{
                backgroundColor: '#fee2e2',
                color: '#b91c1c',
                fontWeight: '600',
                fontSize: 13,
              }}
            >
              <td colSpan={2} style={{ paddingLeft: 12 }}>
                Potongan Personal
              </td>
            </tr>
            {renderCosts(deductionCosts)}
          </>
        )}
        {/* One-off Deductions */}
        {oneOffDeductions.length > 0 && (
          <>
            <tr
              style={{
                backgroundColor: '#fee2e2',
                color: '#b91c1c',
                fontWeight: '600',
                fontSize: 13,
              }}
            >
              <td colSpan={2} style={{ paddingLeft: 12 }}>
                Potongan Sekali
              </td>
            </tr>
            {renderCosts(oneOffDeductions)}
          </>
        )}
        {/* PPh 21 */}
          <tr>
            <td style={{ padding: '8px 12px' }}>PPh 21</td>
            <td style={{ padding: '8px 12px', textAlign: 'right' }}>
              {formatMoney(payroll.tax)}
            </td>
          </tr>
      </tbody>
    </table>
  </div>

  {/* TOTALS */}
  <div
    style={{
      marginTop: 24,
      padding: '12px 24px',
      borderTop: '1px solid #ddd',
      fontSize: 15,
      fontWeight: '700',
      backgroundColor: '#f1f5f9',
      display: 'flex',
      justifyContent: 'space-between',
    }}
  >
    <div>Total Pendapatan:</div>
    <div>{formatMoney(payroll.totalIncome)}</div>
  </div>
  <div
    style={{
      padding: '12px 24px',
      fontSize: 15,
      fontWeight: '700',
      backgroundColor: '#fef9c3',
      display: 'flex',
      justifyContent: 'space-between',
      borderTop: '1px solid #ddd',
    }}
  >
    <div>Total Potongan:</div>
    <div>{formatMoney(payroll.totalDeduction)}</div>
  </div>
  <div
    style={{
      padding: '12px 24px',
      fontSize: 16,
      fontWeight: '800',
      backgroundColor: '#d1fae5',
      display: 'flex',
      justifyContent: 'space-between',
      borderTop: '1px solid #ddd',
      color: '#047857',
    }}
  >
    <div>Gaji Bersih:</div>
    <div>{formatMoney(payroll.takeHomePay)}</div>
  </div>
</div>
);
};

PayslipTable.propTypes = {
  payroll: PropTypes.shape({
    employeeDetails: PropTypes.shape({
      name: PropTypes.string,
      department: PropTypes.string,
      tag: PropTypes.string,
      designation: PropTypes.string,
      npwp: PropTypes.string,
      level: PropTypes.string,
      status: PropTypes.string,
    }),
    presentMonth: PropTypes.string,
    presentYear: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
    basic: PropTypes.number,
    level: PropTypes.shape({
      bonuses: PropTypes.arrayOf(
        PropTypes.shape({
          name: PropTypes.string,
          amount: PropTypes.number,
        })
      ),
    }),
    individualcost: PropTypes.array,
    oneOffPaymentArray: PropTypes.array,
    BPJS: PropTypes.object,
    BPJS_employer: PropTypes.object,
    tax: PropTypes.shape({
      pph21: PropTypes.number,
    }),
    totalIncome: PropTypes.number,
    totalDeduction: PropTypes.number,
    takeHomePay: PropTypes.number,
  }).isRequired,
};

export default PayslipTable;